<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>adb常用命令</title>
    <url>/2021/03/09/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<hr/>
<a id="more"></a>
<h3> ADB简介 </h3>              
ADB，即 Android Debug Bridge，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。安卓调试桥 (Android Debug Bridge, adb)，是一种可以用来操作手机设备或模拟器的命令行工具。它存在于 sdk/platform-tools 目录下。
<h3> 常用命令</h3>
查看当前连接设备

<p><code>adb devices</code></p>
<p>如果发现多个设备<br><code>adb -s 设备号</code></p>
<p>查看顶部 Activity<br><code>adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot;</code><br>【o(<em>￣▽￣</em>)o直接找开发要更加方便】</p>
<p>查看日志<br><code>adb logcat</code><br>ps：日志有很多过滤级别，但是因为在项目中，我都是用Android studio来抓日志，这个命令也没咋用过了，就不详细写了。</p>
<p>安装apk文件<br><code>adb install .xxx..(地址）</code><br>覆盖安装<br><code>adb install -r -t xxx</code></p>
<p>往手机的SD卡传递文件<br><code>adb push 文件名 手机端SDCard路径</code></p>
<p>查看手机端安装的所有app包名</p>
<p><code>adb shell pm list packages </code></p>
<p>启动activity<br><code>adb shell am start 包名/完整Activity路径</code></p>
<p>屏幕截图<br><code>adb shell screencap /sdcard/screen.png</code></p>
<p>录制视频<br><code>adb shell screenrecord /sdcard/demo.mp4</code></p>
<p>其实除了安装apk之外挺少用到adb的命令</p>
<p>慢慢补充吧~</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>busuanzi计数失效的原因</title>
    <url>/2020/11/19/busuanzi%E8%AE%A1%E6%95%B0%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>部署的时候访客量和人数功能都是正常的，发布之后发现总是闪一下就没了。</p>
<a id="more"></a>
<h2 id="闪一下就消失的原因"><a href="#闪一下就消失的原因" class="headerlink" title="闪一下就消失的原因"></a>闪一下就消失的原因</h2><p>f12检查的时候发现页面被请求了两次。原因是next主题已经有了busuanzi的代码，我又往footer文件中加了一次。但是上一个博客中也加了，却没有出现异常。所以这应该只是其中一个原因。总之先把自己加的代码删掉。</p>
<h2 id="在页面中不显示，但刷新后偶尔会出现"><a href="#在页面中不显示，但刷新后偶尔会出现" class="headerlink" title="在页面中不显示，但刷新后偶尔会出现"></a>在页面中不显示，但刷新后偶尔会出现</h2><p>依然右键检查，发现是live2d看板娘的原因，应该是live2d和busuanzi冲突了。</p>
<h3 id="右键检查源代码"><a href="#右键检查源代码" class="headerlink" title="右键检查源代码"></a>右键检查源代码</h3><p>正常时：’style=display:inner’<br>异常时：’style=display:none’</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2></h2><p>如果想继续使用busuanzi的参考这篇博客： <a href="https://boyinthesun.cn/post/error-live2d-busuanzi/">https://boyinthesun.cn/post/error-live2d-busuanzi/</a><br>因为我评论用的是valine插件，所以想改成leancloud云去统计访客量和访客数。</p>
]]></content>
  </entry>
  <entry>
    <title>css学习笔记</title>
    <url>/2020/11/23/css%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>如果有新的补充的会放在评论里。</p>
<a id="more"></a>
<h2 id="css是什么？"><a href="#css是什么？" class="headerlink" title="css是什么？"></a>css是什么？</h2><p>css是一种用来表现HTML或XML等文件样式的计算机语言。能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。  </p>
<h2 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h2><p>CSS 语法<br>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。</p>
<p><code>selector &#123;declaration1; declaration2; ... declarationN &#125;</code><br>选择器通常是需要改变样式的 HTML 元素。</p>
<p>每条声明由一个属性和一个值组成。</p>
<p>属性是希望设置的样式属性，每个属性有一个值。属性和值被冒号分开<br><code>selector &#123;property: value&#125;</code></p>
<h3 id="多重声明："><a href="#多重声明：" class="headerlink" title="多重声明："></a>多重声明：</h3><p>提示：如果要定义不止一个声明，则需要用分号将每个声明分开。</p>
<h2 id="HTML怎样添加css样式？"><a href="#HTML怎样添加css样式？" class="headerlink" title="HTML怎样添加css样式？"></a>HTML怎样添加css样式？</h2><h3 id="html添加css样式有三种方法"><a href="#html添加css样式有三种方法" class="headerlink" title="html添加css样式有三种方法"></a>html添加css样式有三种方法</h3><p>分别为行内式（使用style属性，在特定的HTML标签内使用）、内嵌式（style标签把css代码放在特定页面的head部分中）、外联式（使用link标签，将外部css文件链接到HTML中）。</p>
<h4 id="一、行内式"><a href="#一、行内式" class="headerlink" title="一、行内式"></a>一、行内式</h4><p>使用style属性在特定的HTML标记内设置CSS样式。</p>
<p>建议不要使用内联CSS，因为每个HTML标记都需要单独设置样式，如果您只使用内联CSS，管理网站可能会变得十分困难。但是，它在某些情况下很有用。例如，在您无法访问CSS文件或仅需要为单个元素应用样式的情况下。带有内联CSS的HTML页面示例如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;body style&#x3D;&quot;background-color:black;&quot;&gt;</span><br><span class="line">   &lt;h1 style&#x3D;&quot;color:white;padding:30px;&quot;&gt;Hostinger  Tutorials&lt;&#x2F;h1&gt;</span><br><span class="line">   &lt;p style&#x3D;&quot;color:white;&quot;&gt;Something usefll here.&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="二、内嵌式"><a href="#二、内嵌式" class="headerlink" title="二、内嵌式"></a>二、内嵌式</h4><p>内嵌css样式就是把css代码放在特定页面的部分中。内嵌CSS需要放在标签之间。</p>
<p>类和ID可用于引用CSS代码，但它们仅在该特定页面上处于活动状态。每次页面加载时都会下载以这种方式嵌入的CSS样式，这样可以提高加载速度。在某些情况下使用内嵌样式表很有用，比如：向某人发送页面模板， 因为一切都在一个页面中，所以看到预览要容易得多。</p>
<p>内部样式表的一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    p &#123;color:white; font-size: 10px;&#125;</span><br><span class="line">    .center &#123;display: block; margin: 0 auto;&#125;</span><br><span class="line">    #button-go, #button-back &#123;border: solid 1px black;&#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三、外联式"><a href="#三、外联式" class="headerlink" title="三、外联式"></a>三、外联式</h4><p>外联式就是使用link标签元素将外部CSS文件（.css文件）引用到HTML页面中，引用需要放在页面的部分中。</p>
<p>这是将CSS添加到html页面上最方便的方法。这样，对外部CSS文件所做的任何更改都将反映在你的网站上。</p>
<p>外联样式表的一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;style.css&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>而style.css包含所有样式规则。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.xleftcol &#123;</span><br><span class="line">   float:left;</span><br><span class="line">   width:33%;</span><br><span class="line">   background:#809900;</span><br><span class="line">&#125;</span><br><span class="line">.xmiddlecol&#123;</span><br><span class="line">   float: left;</span><br><span class="line">   width: 34%;</span><br><span class="line">   background:#eff2df;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如今大多数网站使用外部样式表，外部样式是在单独的文档中编写然后附加到各种Web文档的样式。外部样式表会影响它们所连接的任何文件，这意味着如果你有一个20页的网站，每个页面使用相同的样式表，当需要改变的话只需编辑该样式表即可完成这些页面，这使得长期站点管理变得更加容易。</p>
<h2 id="css盒模型是什么？"><a href="#css盒模型是什么？" class="headerlink" title="css盒模型是什么？"></a>css盒模型是什么？</h2><p>盒模型是网页布局的基础，它制定了元素如何在页面中显示。<br>   元素的外边距（margin）、边框（border）、内边距（padding）、内容（content）就构成了CSS盒模型。</p>
<h2 id="dispaly常用的值有哪几种？"><a href="#dispaly常用的值有哪几种？" class="headerlink" title="dispaly常用的值有哪几种？"></a>dispaly常用的值有哪几种？</h2><h3 id="none-此元素不会被显示，并且不占据页面空间。"><a href="#none-此元素不会被显示，并且不占据页面空间。" class="headerlink" title="none 此元素不会被显示，并且不占据页面空间。"></a>none 此元素不会被显示，并且不占据页面空间。</h3><p>这也是与visibility:hidden不同的地方，设置visibility:hidden的元素，不会被显示，但是还是会占据原来的页面空间。</p>
<h3 id="inline-行内元素"><a href="#inline-行内元素" class="headerlink" title="inline 行内元素"></a>inline 行内元素</h3><p>元素会在一行内显示，超出屏幕宽度自动换行，不能设置宽度和高度，元素的宽度和高度只能是靠元素内的内容撑开。<br>示例元素：span,b,i,a,u,sub,sup,strong,em</p>
<h3 id="block-块级元素"><a href="#block-块级元素" class="headerlink" title="block 块级元素"></a>block 块级元素</h3><p> 会独占一行，如果不设置宽度，其宽度会自动填满父元素的宽度，可以设置宽高，即使设置了宽度，小于父元素的宽度，块级元素也会独占一行。<br>示例元素：div,h1-h6,ul,ol,dl,p</p>
<h3 id="inline-block-行内块元素"><a href="#inline-block-行内块元素" class="headerlink" title="inline-block 行内块元素"></a>inline-block 行内块元素</h3><p> 与行内元素一样可以再一行内显示，而且可以设置宽高，可以设置margin和padding。</p>
<h4 id="行内元素与块级元素的区别："><a href="#行内元素与块级元素的区别：" class="headerlink" title="行内元素与块级元素的区别："></a>行内元素与块级元素的区别：</h4><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><p>行内元素：行内元素只能嵌套行内元素，不能嵌套块级元素。<br>块级元素：块级元素可以嵌套行内元素，但是行内元素不可以嵌套块级元素。块级元素之间也可以进行嵌套，但是，并不是块级元素之间可以随意的嵌套。p元素是不能嵌套任何块级元素的，div可以嵌套任意的元素，但是div并不是能够被所有的块级元素嵌套的。<br>div可以嵌套div<br>td可以嵌套div<br>li可以嵌套div<br>dd，dt可以嵌套div<br>结构标记 可以嵌套div</p>
<h5 id="margin和padding"><a href="#margin和padding" class="headerlink" title="margin和padding"></a>margin和padding</h5><p>行内元素：有margin和padding，但是只能够设置左右的值，设置上下的值是无效的。<br>块级元素：可以设置margin和padding上下左右的四个值，margin可以有负值，padding不允许有负值。</p>
<h5 id="设置宽高"><a href="#设置宽高" class="headerlink" title="设置宽高"></a>设置宽高</h5><p>行内元素：不允许设置宽高，行内元素的宽高只能是由行内元素内的内容撑起来。<br>块级元素：允许设置宽高，如果不设置，默认宽度是父元素的100%，高度是由内容撑起来的。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo+github+next建造个人博客</title>
    <url>/2020/11/18/hexo-github-next%E5%BB%BA%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>先写个目录，这几天部署不太稳定。慢慢更新细节吧</p>
<a id="more"></a>
<h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p> 这个很简单应该都会就不写了。</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>  不想购买域名的可以略过这一步<br>以阿里云为例，点此进入阿里云官网：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a><br>用支付宝账号进行登录。<br>点击域名注册，输入自己喜欢的域名进行查找购买。进行实名验证等。。可能备案需要几天。</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>进入git官网选择与电脑合适的版本进行下载，一路next。选择文件位置时可安装在d盘。</p>
<h2 id="git与GitHub绑定"><a href="#git与GitHub绑定" class="headerlink" title="git与GitHub绑定"></a>git与GitHub绑定</h2><h2 id="安装node-js与hexo"><a href="#安装node-js与hexo" class="headerlink" title="安装node.js与hexo"></a>安装node.js与hexo</h2><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><h2 id="设置next主题"><a href="#设置next主题" class="headerlink" title="设置next主题"></a>设置next主题</h2><h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h2>]]></content>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2020/11/21/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>复习html时的一些思考，有新想法可能会直接发在评论里。</p>
<a id="more"></a>
<h2 id="HTML是什么？"><a href="#HTML是什么？" class="headerlink" title="HTML是什么？"></a>HTML是什么？</h2><p>html是（使用标记标签来）描述网页的一种语言，指的是超文本标记语言<br><span style="color: #E30B20">注：不是一种编程语言，而是一种标记语言</span><br>标记语言是一套标记标签 </p>
<h2 id="html的结构长啥样"><a href="#html的结构长啥样" class="headerlink" title="html的结构长啥样"></a>html的结构长啥样</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        I am 阿彬 !</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="标签是什么？"><a href="#标签是什么？" class="headerlink" title="标签是什么？"></a>标签是什么？</h2><p>标签是HTML语言中最基本的单位，是HTML最重要的组成部分。<br>HTML 标签是由尖括号包围的关键词，比如<code> &lt;html&gt;</code><br>通常是成对出现的，比如<code>&lt;b&gt; 和 &lt;/b&gt;</code><br>标签对中的第一个标签是开始标签，第二个标签是结束标签<br>开始和结束标签也被称为开放标签和闭合标签</p>
<h3 id="html标签的作用"><a href="#html标签的作用" class="headerlink" title="html标签的作用"></a>html标签的作用</h3><p>将普通文本、图片、音乐等静态动态信息通过指定的一些标签显示在页面上。</p>
<h2 id="属性是什么？"><a href="#属性是什么？" class="headerlink" title="属性是什么？"></a>属性是什么？</h2><p>标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息<br>属性总是以名称/值对的形式出现，比如：name=”value”。<br>属性总是在 HTML 元素的开始标签中规定。</p>
<h3 id="适用于大多数-HTML-元素的属性："><a href="#适用于大多数-HTML-元素的属性：" class="headerlink" title="适用于大多数 HTML 元素的属性："></a>适用于大多数 HTML 元素的属性：</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>class</td>
<td>classname</td>
<td>规定元素的类名（classname）</td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>规定元素的唯一 id</td>
</tr>
<tr>
<td>style</td>
<td>style_definition</td>
<td>规定元素的行内样式（inline style）</td>
</tr>
<tr>
<td>title</td>
<td>text</td>
<td>规定元素的额外信息（可在工具提示中显示）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/11/18/test/</url>
    <content><![CDATA[<h1 id="这是一个测试文件"><a href="#这是一个测试文件" class="headerlink" title="这是一个测试文件"></a>这是一个测试文件</h1><p>百度: <a href="https://www.baidu.com/">https://www.baidu.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端笔试题-H5&amp;CSS</title>
    <url>/2020/11/27/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98-H5-CSS/</url>
    <content><![CDATA[<p>篇幅有限，很多问题只做了个总结。</p>
<a id="more"></a>
<h3 id="什么是盒模型？请说明是由哪几个部分构成，怪异盒模型可以用哪个属性解决？"><a href="#什么是盒模型？请说明是由哪几个部分构成，怪异盒模型可以用哪个属性解决？" class="headerlink" title="什么是盒模型？请说明是由哪几个部分构成，怪异盒模型可以用哪个属性解决？"></a>什么是盒模型？请说明是由哪几个部分构成，怪异盒模型可以用哪个属性解决？</h3><p>盒模型是用来存放网页中的各种元素<br>在网页中各种元素&lt;图片、文字等&gt;都可以是盒子。<br>盒模型由外边距、边框、内边距、内容构成。</p>
<h4 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h4><p>当设置box-sizing:content-box时，采用标准模式进行计算，默认就是这种模式<br>当设置box-sizing:border-box时，采用怪异模式进行计算</p>
<h4 id="盒子模型与怪异模型差异："><a href="#盒子模型与怪异模型差异：" class="headerlink" title="盒子模型与怪异模型差异："></a>盒子模型与怪异模型差异：</h4><p>标准盒子(W3c标准)：大小 = width(content) + border + padding + margin<br>怪异盒子(IE标准)：大小 = width(content + padding + border) + margin</p>
<h3 id="C3的新特性有哪些，H5的新特性有哪些？"><a href="#C3的新特性有哪些，H5的新特性有哪些？" class="headerlink" title="C3的新特性有哪些，H5的新特性有哪些？"></a>C3的新特性有哪些，H5的新特性有哪些？</h3><h4 id="H5新特性"><a href="#H5新特性" class="headerlink" title="H5新特性"></a>H5新特性</h4><p>1、语义化标签 (header, nav, footer, aside, article, section)</p>
<p>2、音频、视频 (audio(MP3, Wav, Ogg), video(MP4, WebM, Ogg))</p>
<p>3、画布 (Canvas)</p>
<p>4、本地存储 (LocalStorage, sessionStorage)</p>
<p>5、表单控件 (calendar, datetime, date, time, email, url, search, number, color, month, week)</p>
<p>6、新技术 (webworker, websocket, Geolocation)</p>
<h5 id="移除的元素"><a href="#移除的元素" class="headerlink" title="移除的元素"></a>移除的元素</h5><p>1、纯表现的元素 (basefont, big, center, font, s, strike, tt, u)</p>
<p>2、对可用性产生负面影响的元素 (frame, frameset, noframes)</p>
<h4 id="CSS新特性"><a href="#CSS新特性" class="headerlink" title="CSS新特性"></a>CSS新特性</h4><p>1、圆角(border-radius), 阴影(box-shadow)</p>
<p>2、文字加特效(text-shadow), 线性渐变(gradient), 旋转(transfrom)</p>
<p>3、transfrom:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg); // 旋转,缩放,定位,倾斜</p>
<p>4、多背景 rgba</p>
<p>5、在CSS3中唯一引入的微元素是 ::selection</p>
<p>6、媒体查询, 多兰布局</p>
<p>7、border-image</p>
<p>8、字体图标(font-face) 弹性布局(flex)</p>
<h3 id="如何将一个盒子水平垂直居中？"><a href="#如何将一个盒子水平垂直居中？" class="headerlink" title="如何将一个盒子水平垂直居中？"></a>如何将一个盒子水平垂直居中？</h3><h4 id="全局样式："><a href="#全局样式：" class="headerlink" title="全局样式："></a>全局样式：</h4><p>HTML:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;child&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<p>CSS:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    border: 1px solid #000;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="position定位（适用于盒子有宽度和高度的时候）"><a href="#position定位（适用于盒子有宽度和高度的时候）" class="headerlink" title="position定位（适用于盒子有宽度和高度的时候）"></a>position定位（适用于盒子有宽度和高度的时候）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">     position:absolute;</span><br><span class="line">	 top:50%;</span><br><span class="line">	 left:50%;</span><br><span class="line">	 margin-left:-25px;</span><br><span class="line">	 margin-top:-25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="position-transform-子盒子有或没有宽高的时候都适用"><a href="#position-transform-子盒子有或没有宽高的时候都适用" class="headerlink" title="position+transform(子盒子有或没有宽高的时候都适用)"></a>position+transform(子盒子有或没有宽高的时候都适用)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">	top: 50%;</span><br><span class="line">	left: 50%;</span><br><span class="line">	transform: translate(-50%,-50%);</span><br></pre></td></tr></table></figure>
<h5 id="flex布局（子盒子有或没有宽高的时候都适用）"><a href="#flex布局（子盒子有或没有宽高的时候都适用）" class="headerlink" title="flex布局（子盒子有或没有宽高的时候都适用）"></a>flex布局（子盒子有或没有宽高的时候都适用）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">	justify-content: center;</span><br><span class="line">	align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遇到过浮动带来的问题吗，遇到请写出它有几种解决方法。"><a href="#遇到过浮动带来的问题吗，遇到请写出它有几种解决方法。" class="headerlink" title="遇到过浮动带来的问题吗，遇到请写出它有几种解决方法。"></a>遇到过浮动带来的问题吗，遇到请写出它有几种解决方法。</h3><h4 id="浮动是什么？"><a href="#浮动是什么？" class="headerlink" title="浮动是什么？"></a>浮动是什么？</h4><p>浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素。</p>
<h4 id="清除浮动的四种方式"><a href="#清除浮动的四种方式" class="headerlink" title="清除浮动的四种方式"></a>清除浮动的四种方式</h4><p>1、利用clear样式<br>2、父元素结束标签之前插入清楚浮动的块级元素<br>3、利用伪元素<br>4、利用overflow去除浮动</p>
<h3 id="display：none；与visibility：hidden的共同点与区别？"><a href="#display：none；与visibility：hidden的共同点与区别？" class="headerlink" title="display：none；与visibility：hidden的共同点与区别？"></a>display：none；与visibility：hidden的共同点与区别？</h3><p>dispaly与visibility一样都是隐藏元素的意思。<br>但display: none隐藏后的元素不占据任何空间，而visibility: hidden隐藏后的元素空间依旧保留。</p>
<h4 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h4><h5 id="visibility具有继承性"><a href="#visibility具有继承性" class="headerlink" title="visibility具有继承性"></a>visibility具有继承性</h5><p>给父元素设置visibility:hidden;子元素也会继承这个属性。但是如果重新给子元素设置visibility: visible,则子元素又会显示出来。这个和display: none有着质的区别</p>
<h5 id="visibility-hidden不会影响计数器的计数"><a href="#visibility-hidden不会影响计数器的计数" class="headerlink" title="visibility: hidden不会影响计数器的计数"></a>visibility: hidden不会影响计数器的计数</h5><p>visibility: hidden虽然让一个元素不见了，但是其计数器仍在运行。这和display: none完全不一样</p>
<h5 id="CSS3的transition支持visibility属性"><a href="#CSS3的transition支持visibility属性" class="headerlink" title="CSS3的transition支持visibility属性"></a>CSS3的transition支持visibility属性</h5><p>但是并不支持display，由于transition可以延迟执行，因此可以配合visibility使用纯css实现hover延时显示效果。提高用户体验。</p>
<h5 id="display-none是会有回流"><a href="#display-none是会有回流" class="headerlink" title="display:none是会有回流"></a>display:none是会有回流</h5><p>但是visibility: hidden; 是不会有回流的</p>
<h3 id="知道css的预处理器吗，如果用过预处理器，请谈一下它的一些好处。"><a href="#知道css的预处理器吗，如果用过预处理器，请谈一下它的一些好处。" class="headerlink" title="知道css的预处理器吗，如果用过预处理器，请谈一下它的一些好处。"></a>知道css的预处理器吗，如果用过预处理器，请谈一下它的一些好处。</h3><h4 id="css预处理器"><a href="#css预处理器" class="headerlink" title="css预处理器"></a>css预处理器</h4><p>CSS预处理器是一种专门的编程语言，用来为CSS增加一些编程特性（CSS本身不是编程语言）。<br>不需要考虑浏览器兼容问题，因为CSS预处理器最终编译和输出的仍是标准的CSS样式。<br>可以在CSS预处理器中：使用变量、简单逻辑判断、函数等基本编程技巧。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</p>
<h3 id="css中的px代表着什么意思？"><a href="#css中的px代表着什么意思？" class="headerlink" title="css中的px代表着什么意思？"></a>css中的px代表着什么意思？</h3><p>px就是pixel（像素）的缩写，相对长度单位，相对于屏幕分辨率。</p>
<h3 id="css的选择器知道有哪些？"><a href="#css的选择器知道有哪些？" class="headerlink" title="css的选择器知道有哪些？"></a>css的选择器知道有哪些？</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>以标签名开头，选择所有div元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br></pre></td></tr></table></figure>
<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>给标签取class名，以点（.）加class名开头，选择所有该class名的元素<br><code>&lt;div class=&quot;wrap&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>给标签取id名，以#加id名开头，具有唯一性，选择”id = ‘wrap’”的元素<br><code>&lt;div id=&quot;wrap&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#warp &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>以&gt;隔开父子级元素，(模块名&gt;模块名，修饰&gt;前模块内的子模块)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&gt;p &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="包含选择器"><a href="#包含选择器" class="headerlink" title="包含选择器"></a>包含选择器</h4><p>以空格隔开包含关系的元素，(模块名模块名，修饰空格前模块内所有该模块)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div p &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><p>以<del>隔开兄弟关系的元素(模块名</del>模块名 修饰~前模块往下的所有兄弟模块)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.first~p&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;first&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h4><p>以+隔开相邻关系的元素(模块名+模块名 修饰加号前模块往下的相邻的模块 只一个)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.first+p&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;p class&#x3D;&quot;first&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h4><p>以*开头(星号标在大括号前，修饰了包含body所有的标签)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">   margin:0;</span><br><span class="line">   padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">            &lt;p class&#x3D;&quot;first&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="群选择器"><a href="#群选择器" class="headerlink" title="群选择器"></a>群选择器</h4><p>以，分隔(逗号分隔开需要修饰的模块名)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.first,span &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;first&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>[] ([type=text]修饰属性为type=text的模块)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[type&#x3D;text] &#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;first&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端笔试题</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔试题</tag>
      </tags>
  </entry>
  <entry>
    <title>探索性软件测试</title>
    <url>/2021/03/09/%E6%8E%A2%E7%B4%A2%E6%80%A7%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>所有软件都会执行四个基本任务：接受输出、产生输出、存储数据、进行运算。</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大概是工作的第二个月开始看的这本书，对我这种新手来说，这本书比《软件测试》有趣的多。也是启发了我面对一个没有用过的产品时，该怎样有条理的进行测试。</p>
<h3 id="漫游测试"><a href="#漫游测试" class="headerlink" title="漫游测试"></a>漫游测试</h3><p>把软件测试的过程当成一场旅游。</p>
<h4 id="商业区"><a href="#商业区" class="headerlink" title="商业区"></a>商业区</h4><p>在城市中，商业区意味着繁荣，人群的拥挤。是来到一座城市后首选的地方(先找到市中心吃吃喝喝）<br>对软件测试来说，”商业区意味着”这个软件的主打功能。是用户最常用到的。<br>举例：测试一个音乐播放器app，登录注册、选歌单、听歌、收藏、后台播放、退出app。这些操作都是用户最常用到的。</p>
<h4 id="历史区"><a href="#历史区" class="headerlink" title="历史区"></a>历史区</h4><p>测试从前版本留下的代码，曾经出现较多缺陷的特性和功能。很多缺陷可能这几个版本没有发现，后一个版本又复现了。(所以多轮迭代测试还是非常重要阿！对一些严重且概率较低的bug应该在每个版本都验证一下）</p>
<h4 id="旅游区"><a href="#旅游区" class="headerlink" title="旅游区"></a>旅游区</h4><p>本地人不常去，外地人专门为此来的地方。在软件中，有些特性和功能对新用户非常有吸引力，老用户却不怎么使用。<br>ps：这个还真不好说，谁知道新用户看上了哪点呢~</p>
<h4 id="娱乐区"><a href="#娱乐区" class="headerlink" title="娱乐区"></a>娱乐区</h4><p>类似于电影院，商场这样能让人休息放松的地方，<br>举例：这个举例感jio…居然想不出来，先空着占个地吧~</p>
<h4 id="旅馆区"><a href="#旅馆区" class="headerlink" title="旅馆区"></a>旅馆区</h4><p>这当然就是休息的地方了~当软件休息时，实际上他还是非常忙碌。<br>举例：将蓝牙耳机放置桌上几小时，拿起来佩戴后，佩戴检测可能失效。</p>
<h4 id="破旧区"><a href="#破旧区" class="headerlink" title="破旧区"></a>破旧区</h4><p>旅游中没有人想去的地方~<br>测试中，用户很少使用的功能，容易出错的功能~</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这本书目前是看完了前四章，对这个漫游测试方法的印象最深，其他的倒是不怎么记得了，所以其他的也就没写QAQ..毕竟不是概念，还是先寻找到一种自己喜欢的测试方法比较重要<del>剩下的边看边理解吧</del></p>
<h3 id="一个关于软件测试的笑话"><a href="#一个关于软件测试的笑话" class="headerlink" title="一个关于软件测试的笑话"></a>一个关于软件测试的笑话</h3><p>一个测试工程师走进一家酒吧，要了一杯啤酒；<br>一个测试工程师走进一家酒吧，要了一杯咖啡；<br>一个测试工程师走进一家酒吧，要了0.7杯啤酒；<br>一个测试工程师走进一家酒吧，要了-1杯啤酒；<br>一个测试工程师走进一家酒吧，要了2^32杯啤酒；<br>一个测试工程师走进一家酒吧，要了一杯洗脚水；<br>一个测试工程师走进一家酒吧，要了一杯蜥蜴；<br>一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&amp;*(@；<br>一个测试工程师走进一家酒吧，什么也没要；<br>一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来；<br>一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿；<br>一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷；<br>一个测试工程师走进一家酒吧，要了NaN杯Null；<br>一个测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶；<br>一个测试工程师把酒吧拆了；<br>一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱；<br>一万个测试工程师在酒吧门外呼啸而过；<br>一个测试工程师走进一家酒吧，要了一杯啤酒’;DROP TABLE 酒吧；<br>测试工程师们满意地离开了酒吧。<br>然后一名顾客点了一份炒饭，酒吧炸了。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>《探索性软件测试》</tag>
      </tags>
  </entry>
  <entry>
    <title>构建博客中暂时未能解决的问题</title>
    <url>/2020/11/18/%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%9A%82%E6%97%B6%E6%9C%AA%E8%83%BD%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<center>如果有知道的请留言</center>
<a id="more"></a>
<h2> 使用livere做评论系统时，留言板界面加载不出评论</h2>
在网上找了一圈答案，都没有发现类似的问题。可能是next主题和livere本身的问题=-=<br>
修改的时候不知道哪出错了，js文件全报了语法错误,无奈只好删除blog文件夹重新下载，还好文章不多<br>
<h2> valine评论无法通过qq号获取头像和用户名</h2>
看其他博主的文章，next的valine标签里面有个enableQQ，但是我的next主题下的enableQQ中没有这个标签。加上
后也无法通过qq号获取头像和用户名。继续百度发现有的博主是通过valin.min.js来找的。但是我的next目录下没有他们说的footer文件。
我猜可能是最新版本的next已经不能用enableQQ了吧。
<h2> 无法在博客中加入网易云音乐</h2>
在网页版复制了自己喜欢的歌的外部链接，按一个博主说的加入到文件中然后保存并没有效果。
网上还有其他的教程没试。
<h2> 关于博客美化的其他问题</h2>
（持续更新中...)

]]></content>
  </entry>
  <entry>
    <title>测试基础一</title>
    <url>/2021/01/25/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
    <content><![CDATA[<hr/>     
<a id="more"></a>

<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="检查产品说明书"><a href="#检查产品说明书" class="headerlink" title="检查产品说明书"></a>检查产品说明书</h3><p>编写详细产品说明书可以将其作为测试项目的书面材料，据此可以在编写代码之前找出软件缺陷。</p>
<h3 id="黑盆测试和白盒测试"><a href="#黑盆测试和白盒测试" class="headerlink" title="黑盆测试和白盒测试"></a>黑盆测试和白盒测试</h3><p><span style="color: #7B68EE">黑盒测试[功能性测试行为测试]</span><br>   无法看到盒子里的软件是如何运行的，只要进行一些输入,就能得到某种输出结果。</p>
<p><span style="color: #7B68EE">白盒测试[透明性测试]</span><br>  可以访问程序员代码，并通过检查代码的线索来协助测试，测试员根据代码检查结果判断或多或少可能出错的数目，并据此定制测试。<br><span style="color: #FF0000">注意:进行白盒测试要冒一些风险。因为要以适应代码操作来定制测试，所以很容易形成偏见而无法进行客观测试。</p>
<h3 id="静态测试和动态测试"><a href="#静态测试和动态测试" class="headerlink" title="静态测试和动态测试"></a>静态测试和动态测试</h3><p><span style="color: #7B68EE">静态测试</span>   测试不运行的部分，只是检查和审核</p>
<p><span style="color: #7B68EE">动态测试</span>   通常意义上的测试，使用和运行软件</p>
<p><span style="color: #FF0000">测试产品说明书属于静态黑盒测试。</p>
<h3 id="审查竞争产品时要注意的问题包括"><a href="#审查竞争产品时要注意的问题包括" class="headerlink" title="审查竞争产品时要注意的问题包括"></a>审查竞争产品时要注意的问题包括</h3><p><span style="color: #7B68EE"> 规模</span>   软件的功能强大还是单一? 代码多还是少?这些差别与测试有关吗?</p>
<p><span style="color: #7B68EE"> 复杂性</span>  软件简单还是复杂?会影响测试吗?</p>
<p><span style="color: #7B68EE">测试性</span>  是否有足够的资源、时间和经验来测试软件?</p>
<p><span style="color: #7B68EE">质量和可靠性 </span> 软件是否完全满足质量要求?可靠性高还是低?</p>
<p><span style="color: #7B68EE">安全性 </span> 竞争对手软件的安全性(不管是宣传还是实际的)和自身的比较起来如何?</p>
<h3 id="产品说明书属性检查清单"><a href="#产品说明书属性检查清单" class="headerlink" title="产品说明书属性检查清单"></a>产品说明书属性检查清单</h3><p><span style="color: #7B68EE">完整</span>   是否有遗漏和丢失?是否完全?单独使用时是否包含所有内容?</p>
<p><span style="color: #7B68EE">准确</span>   既定解决方案正确吗?目标定义明确吗?有没有错误?</p>
<p><span style="color: #7B68EE">精确、不含糊、清晰</span>   描述是否一清二楚?是否有单独的解释?容易看懂和理解吗?</p>
<p><span style="color: #7B68EE">一致</span> 产品功能描述是否自相矛盾、或与其他功能有无冲突?</p>
<p><span style="color: #7B68EE">贴切 </span>  描述功能的陈述是否必要?有没有多余信息?功能是否符合原来的客户要求?</p>
<p><span style="color: #7B68EE">合理</span>  在规定的预算和进度下，以现有人力、工具和资源能否实现?</p>
<p><span style="color: #7B68EE">代码无关</span> 产品说明书是否坚持定义产品，而不是定义其软件设计、架构和代码</p>
<p><span style="color: #7B68EE">可测试性</span>  功能能否测试?给测试员提供的建立验证操作的信息量是否足够?</p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p><span style="color: #7B68EE">动态黑盒测试</span> 不深入代码细节测试软件的方法。测试员输入数据、接受输出、检验结果。</p>
<p><span style="color: #7B68EE">测试用例</span>  进行测试时使用特定输入，以及测试软件的过程步骤</p>
<h3 id="软件测试两种基本方法"><a href="#软件测试两种基本方法" class="headerlink" title="软件测试两种基本方法"></a>软件测试两种基本方法</h3><p><span style="color: #7B68EE">通过性测试</span>  确认软件至少能做什么，而不会考验其能力，仅用最简单，最直观的测试用例。</p>
<p>纯粹为了破坏软件而设计和执行的测试用例称为   <span style="color: #7B68EE">失效性测试或错误强制测试</span></p>
<p><span style="color: #4169E1">等价类划分<br><span style="color: #4169E1">选择测试用例的方法是等价类划分，等价类划分是指分步骤地把海量的测试用例集减的很小，但过程同样有效。</p>
<p><span style="color: #FF0000">注意:一个等价类或者等价划分是指测试相同目标或者暴露相同软件缺陷的一组测试用例</span></p>
<hr/>
<span style="color: #FF0000">数据测试</span>
对软件最简单的认识就是将其分成两部分:数据(或其范围)和程序。数据包括键盘输入、鼠标单击、磁盘文件、打印输出等。程序是指可执行的流程、转换。软件测试常用的一个方法是把测试工作按同样的形式划分。

<p><span style="color: #FF0000">边界条件</span><br>边界条件是特殊情况，因为编程从根本上说在边界上容易产生问题。</p>
<p><span style="color: #FF0000">次边界条件</span><br>有些边界在软件内部，最终用户几乎看不到，但是软件测试员仍然有必要进行检查。这样的边界条件称为次边界条件。</p>
<p>一定要考虑建立处理<span style="color: #FF0000">默认值、空白、空值、零值或者无输入</span>等条件的等价划分</p>
<p><span style="color: #4169E1">因为这些值在软件中通常进行不同的处理，所以不要把它们与合法情况和非法情况混在一起，而要建立单独的等价划分。可能在这种默认情况下,和输入或者-1作为非法值比较起来,软件会执行不同路径。由于考虑到软件的不同操作，所以应把这些作为单独的等价划分。</span></p>
<p><span style="color: #FF0000">非法、错误、不正确和垃圾数据.</span></p>
<p>此类软件没有实际的规则，只是设法破坏软件,要发挥创造力，学会走偏门。</p>
<h3 id="状态测试"><a href="#状态测试" class="headerlink" title="状态测试"></a>状态测试</h3><p>软件状态是指软件当前所处的条件或者模式。</p>
<p>软件通过代码执行进入某一个分支,触发一些数据位， 设置某些变量，读取某些数据，转入一个新的状态。</p>
<p><span style="color: #FF0000">注意软件测试员必须测试程序的状态及其转换</span></p>
<p>对于软件测试，解决方法是运用等价划分技术选择状态和分支。因为选择不做完全测试，所以要承担一定的风险,但是要通过合理选择减少风险。</p>
<h4 id="状态转换图应该表示出以下项目"><a href="#状态转换图应该表示出以下项目" class="headerlink" title="状态转换图应该表示出以下项目:"></a>状态转换图应该表示出以下项目:</h4><p>软件可能进入的每一种独立状态</p>
<p>从一种状态转入另一种状态所需的输入和条件</p>
<p>状态转换图应该表示出以下项目:</p>
<p>软件可能进入的每种独立状态</p>
<p>从一种状态转入另-种状态所需的输入和条件</p>
<p>进入或者退出某种状态时的设置条件及输出结果</p>
<h4 id="需要将大量的可能性减少到可以操作的测试用例集合，有以下5种实现方法"><a href="#需要将大量的可能性减少到可以操作的测试用例集合，有以下5种实现方法" class="headerlink" title="需要将大量的可能性减少到可以操作的测试用例集合，有以下5种实现方法"></a>需要将大量的可能性减少到可以操作的测试用例集合，有以下5种实现方法</h4><p>每种状态至少访问一次。如何到达没有关系。但是每一种状态都必须测试</p>
<p>测试看起来是最常见和最普遍的状态转换</p>
<p>测试状态之间最不常用的分支</p>
<p>测试所有错误状态及其返回值</p>
<p>测试随机状态转换</p>
<p><span style="color: #4169E1">测试状态及其转换包括检查所有的状态变量</span>——<span style="color: #FF0000">与进入和退出状态相关的静态条件、信息、值、功能等。</span></p>
<h3 id="竞争条件和时序错乱"><a href="#竞争条件和时序错乱" class="headerlink" title="竞争条件和时序错乱"></a>竞争条件和时序错乱</h3><p><span style="color: #7B68EE">以下是可能会面临竞争条件的例子情形</span></p>
<p>两个不同的程序同时保存和打开同一个文档</p>
<p>共享同一台打印机、通信端口或者其他外围设备</p>
<p>当软件处于读取或者改变状态时按键或者单击鼠标</p>
<p>当软件处于读取或者改变状态时按键或者单击鼠标</p>
<p>同时关闭或者启动软件的多个实例</p>
<p>同时使用不同的程字访问-个共同的数据库</p>
<hr/>
另外三个失效性测试是<span style="color: #FF0000">重复、压迫和重负</span>。这些测试的目标是那些处理程序员没考虑到，但在极端恶劣条件下可能发生问题的状态。

<p><span style="color: #7B68EE">重复测试</span> 不断执行同样的操作。进行这种反复测试的主要原因是检查是否存在内存泄漏。</p>
<p><span style="color: #7B68EE">压迫测试</span> 是使软件在不够理想的条件下运行————内存小、 磁盘空间少、CPU速度慢、调制调节器速率低等。观察软件对外部资源的要求和依赖的程度。</p>
<p><span style="color: #7B68EE">重负测试</span> 与压迫测试相反。是尽量提供条件任其发挥。让软件处理尽可能大的数据文件。</p>
<p>时间也是一种重负测试。对于大多数软件，长期稳定的工作是很重要的</p>
<p><span style="color: #FF0000">注意:重复、压迫和重负测试应联合使用，同时进行，这是找出以其他方式难以发现的严重缺陷的一个可靠的方法。</span></p>
<h3 id="其他黑盒测试技术"><a href="#其他黑盒测试技术" class="headerlink" title="其他黑盒测试技术"></a>其他黑盒测试技术</h3><p>像笨拙的用户那样做</p>
<p>在已找到的软件缺陷的地方再找找像黑客一样考虑问题</p>
<p>凭借经验、直觉和预感</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>《软件测试》</tag>
      </tags>
  </entry>
  <entry>
    <title>测试基础二</title>
    <url>/2021/02/28/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
    <content><![CDATA[<p>《软件测试》这本书大概就看到这里了，后面的稍微翻了下..emm..以我现在的基础，看了也白搭…因为是刚接触软件测试时做的笔记，现在看来十分无用..只是总结了一些概念.我并没有理解.但是也还是发了博客~希望以后再回过头来看时，我的理解能不止于概念。</p>
<a id="more"></a>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="静态白盒测试-检查设计和代码"><a href="#静态白盒测试-检查设计和代码" class="headerlink" title="静态白盒测试:检查设计和代码"></a>静态白盒测试:检查设计和代码</h3><p>在不执行软件的条件下有条理地仔细审查软件设计、体系结构和代码，从而找出软件缺陷的过程，有时称为结构化分析。</p>
<h3 id="正式审查"><a href="#正式审查" class="headerlink" title="正式审查"></a>正式审查</h3><p>进行静态白盒测试的过程</p>
<h4 id="正式审查有四个基本要素"><a href="#正式审查有四个基本要素" class="headerlink" title="正式审查有四个基本要素:"></a>正式审查有四个基本要素:</h4><p>• 确定问题</p>
<p>• 遵守规则</p>
<p>• 准备</p>
<p>• 编写报告</p>
<h4 id="正式审查的间接效果"><a href="#正式审查的间接效果" class="headerlink" title="正式审查的间接效果:"></a>正式审查的间接效果:</h4><p>• 交流正式报告中未包含的信息得以交流</p>
<p>• 质量让程序员多花点心思保证准确性。</p>
<p>• 小组同志化</p>
<p>• 解决问题</p>
<h4 id="同事审查"><a href="#同事审查" class="headerlink" title="同事审查"></a>同事审查</h4><p><span style="color: #7B68EE">走查</span>  走查中编写代码的程序员向5人小组或者其他程序员和测试员组成的小组做正式陈述。</p>
<p><span style="color: #7B68EE">检验</span>  最正式的审查类型，具有高度组织化。要求每一个参与者都接受训练。</p>
<h3 id="编码标准和规范"><a href="#编码标准和规范" class="headerlink" title="编码标准和规范"></a>编码标准和规范</h3><p>有三个重要的原因要坚持标准或规范</p>
<p>• 规范性</p>
<p>• 可读性\维护性</p>
<p>• 移植值</p>
<h3 id="通用代码审查清单"><a href="#通用代码审查清单" class="headerlink" title="通用代码审查清单"></a>通用代码审查清单</h3><p>• 数据引用错误 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 数据声明错误</p>
<p>• 计算错误 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;• 比较错误</p>
<p>• 控制流程错误 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 子程序参数错误</p>
<p>• 输入\输出错误 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   • 其他检查</p>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="动态白盒测试包括以下四个部分"><a href="#动态白盒测试包括以下四个部分" class="headerlink" title="动态白盒测试包括以下四个部分:"></a>动态白盒测试包括以下四个部分:</h3><p>• 直接测试底层函数、过程、子程序和库</p>
<p>• 以完整程序的方式从顶层测试软件，但是根据对软件运行的了解调整测试用例</p>
<p>• 从软件获得读取变量和状态信息的访问权,以便确定测试与预期结果是否相符，同时，强制软件以正常测试难以实现的方式运行</p>
<p>• 估算执行测试时，”命中” 的代码量和具体代码，然后调整测试，去掉多余的测试用例，补充遗漏的用例</p>
<h3 id="动态白盒测试和调试"><a href="#动态白盒测试和调试" class="headerlink" title="动态白盒测试和调试."></a>动态白盒测试和调试.</h3><p>动态白盒测试的目标是寻找软件缺陷，调试的目标是修复缺陷。然而它们在隔离软件缺陷的位置和原因上确实存在交叉现象。</p>
<h3 id="单元测试和集成测试"><a href="#单元测试和集成测试" class="headerlink" title="单元测试和集成测试"></a>单元测试和集成测试</h3><p>如果代码分段构建和测试，最后合在一起形成更大的部分,那么整个产品无疑会链接在一起。</p>
<h2 id="4-7章讲述了软件测试的基础"><a href="#4-7章讲述了软件测试的基础" class="headerlink" title="4~7章讲述了软件测试的基础:"></a>4~7章讲述了软件测试的基础:</h2><p><span style="color: #7B68EE">静态黑盒测试</span> 是指检查产品说明书，并在软件编写之前找出问题</p>
<p><span style="color: #7B68EE">动态黑盒测试</span> 是指在不了解软件如何工作的前提下进行测试</p>
<p><span style="color: #7B68EE">静态白盒测试</span> 是指通过正式审查和检验检查代码的细节</p>
<p><span style="color: #7B68EE">动态白盒测试</span> 是指在看到软件的工作方式时，根据获得的信息对软件进行测试</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>《软件测试》</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试综述</title>
    <url>/2021/01/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<p>看《软件测试》1-3章的笔记。都是些概念,但是我确实需要恶补基础~</p>
<a id="more"></a>

<h3 id="至少满足下列5个规则之一，才称发生了一个软件缺陷"><a href="#至少满足下列5个规则之一，才称发生了一个软件缺陷" class="headerlink" title="至少满足下列5个规则之一，才称发生了一个软件缺陷"></a>至少满足下列5个规则之一，才称发生了一个软件缺陷</h3><p>• 软件未实现产品说明书要求的功能</p>
<p>• 软件出现了产品说明书指明不应该出现的错误</p>
<p>• 软件实现了产品说明书未提到的功能</p>
<p>• 软件未实现产品说明书虽未明确提及但应该实现的目标</p>
<p>• 软件难以理解、不易使用、运行缓慢或者——从测试员的角度来看，最终用户会成为不好。</p>
<h3 id="进度表Gantt图表是显示项目任务水平时间线的条形图表"><a href="#进度表Gantt图表是显示项目任务水平时间线的条形图表" class="headerlink" title="进度表Gantt图表是显示项目任务水平时间线的条形图表"></a>进度表Gantt图表是显示项目任务水平时间线的条形图表</h3><h3 id="常用软件设计文档的清单"><a href="#常用软件设计文档的清单" class="headerlink" title="常用软件设计文档的清单"></a>常用软件设计文档的清单</h3><p><span style="color: #7B68EE">结构文档  <span style="color: #808080">描述软件整体设计的文档,包括软件所有主要部分的描述以及相互之间的交互方式</p>
<p><span style="color: #7B68EE">数据流图 <span style="color: #808080">表示数据在程序中如何流动的正规示意图</p>
<p><span style="color: #7B68EE">状态转换图 <span style="color: #808080">把软件分解为基本状态或者条件的另-种正规示意图 ，表示不同状态间转换的方式</p>
<p><span style="color: #7B68EE">流程图 <span style="color: #808080">用图形描述程序逻辑的传统方式</p>
<p><span style="color: #7B68EE">代码注释</p>
<h3 id="测试提交清单"><a href="#测试提交清单" class="headerlink" title="测试提交清单"></a>测试提交清单</h3><p><span style="color: #7B68EE">测试计划 <span style="color: #808080">包括质量目标、资源需求进度表、任务分配、方法等</p>
<p><span style="color: #7B68EE">测试用例 <span style="color: #808080">列举测试的项目，描述验证软件的详细步骤</p>
<p><span style="color: #7B68EE">缺陷报告 <span style="color: #808080">描述执行测试用例找出的问题，通常记录在数据库中</p>
<p><span style="color: #7B68EE"> 测试工具和自动测试</p>
<p><span style="color: #7B68EE">度量、统计和总结 <span style="color: #808080">测试过程的汇总，采用图形、表格和报告等形式。</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #FF6347">帮助文档    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #90EE90"> 用户手册</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6495ED">样本和示例  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    <span style="color: #40E0D0">标签和不干胶</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #008B8B">产品支持信息  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style="color: #87CEEB"> 图表和标志 </p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #3CB371">错误信息        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #808080">广告和宣传材料</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style="color: #9400D3">安装           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #008B8B">说明文件</p>
<p><span style="color: #6495ED">别忘了测试错误提示信息</p>
<h3 id="软件项目成员"><a href="#软件项目成员" class="headerlink" title="软件项目成员"></a>软件项目成员</h3><p><span style="color: #7B68EE">项目经理 <span style="color: #808080">编写产品说明书、管理进度、进行重大决策</p>
<p><span style="color: #7B68EE"> 体系架构师系统工程师  <span style="color: #808080">技术专家，可以胜任设计整个系统的体系架构或软件</p>
<p><span style="color: #7B68EE"> 程序员  <span style="color: #808080">编写软件并修复软件中的缺陷</p>
<p><span style="color: #7B68EE"> 测试员  <span style="color: #808080">负责找出并报告软件产品的问题</p>
<p><span style="color: #7B68EE"> 技术作者  <span style="color: #808080">编制软件产品附带的文件和联机文档</p>
<p><span style="color: #7B68EE"> 配置管理员  <span style="color: #808080">把程序员编写的代码及技术作者写的全部文档资料组合在一起， 合成为一个软件包。</p>
<h3 id="常见的四种软件开发生命周期模式"><a href="#常见的四种软件开发生命周期模式" class="headerlink" title="常见的四种软件开发生命周期模式"></a>常见的四种软件开发生命周期模式</h3><p><span style="color: #7B68EE">大爆炸模式  <span style="color: #808080">计划、进度安排和正规的开发过程几乎没有。所有精力都花在开发软件和编写代码上。多数情况下，大爆炸几乎没有什么测试。</p>
<p><span style="color: #7B68EE">边写边改模式  <span style="color: #808080">典型的非正规说明书编码、 修改、反复进行[直到有人放弃]最终产品.边写边改模式,极其适合意在快速制作而且用完就扔的小项目.</p>
<p><span style="color: #7B68EE">瀑布模式  <span style="color: #808080">构思-分析-设计-开发-测试-最终产品</p>
<h4 id="瀑布模式三点需要强调"><a href="#瀑布模式三点需要强调" class="headerlink" title="瀑布模式三点需要强调"></a>瀑布模式三点需要强调</h4><p>• 瀑布模式非常强调产品的定义，注意:开发或者代码编制阶段只是其中单独的一块。</p>
<p>• 瀑布模式各步骤的分立的、没有交叉。</p>
<p>• 瀑布模式无法回溯。一旦进入某个步骤，就要完成该步骤的任务，无法回溯。</p>
<p><span style="color: #6495ED">缺点:因为测试仅在最后进行，所以一些根本性问题可能出现在早期，但是直到准备发布产品时才可能发现。</p>
<p><span style="color: #7B68EE">螺旋模式 每一次循环包括6个步骤</p>
<p>• 确定目标、可选方案和限制条件</p>
<p>• 明确并化解风险</p>
<p>• 评估可选方案</p>
<p>• 当前阶段开发和测试</p>
<p>• 计划下一阶段</p>
<p>• 确定进入下一阶段的方法</p>
<p><span style="color: #6495ED">螺旋模式中包含了一点瀑布模式[分析、设计、开发和测试的步骤]、一点边写边改模式[螺旋模式的每一次] 和一点大爆炸模式[从外界观察]加上改模式发现问题早、成本低的特点，可以算做相当好的开发模式。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>《软件测试》</tag>
      </tags>
  </entry>
</search>
